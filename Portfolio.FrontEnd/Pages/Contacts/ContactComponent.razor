@page "/contact"
@inject HttpClient httpClient

<PageTitle>Contact Me</PageTitle>

<div class="container p-lg-5">
    <div class="row">
        <div class="col-lg-12">
            <h1>Contact Me</h1>
            <p>I'm interested in freelancing opportunities as time permits. Feel free to reach out! I'd love to hear from you.</p>
        </div>
    </div>
    <div class="row pt-4">
        <div class="col-lg-6">
            <h2><i class="fa-solid fa-hashtag"></i> Social Media</h2>
            <p>Connect with me on social media!</p>
            <p>
                <a href="https://www.linkedin.com/in/jason-shands-215757238/">
                    <i class="fa-2x fa-brands fa-linkedin-in"></i>
                </a>&nbsp;&nbsp;&nbsp;&nbsp;
                <a href="https://github.com/shandsj">
                    <i class="fa-2x fa-brands fa-github"></i>
                </a>&nbsp;&nbsp;&nbsp;&nbsp;
                <a href="https://twitter.com/shandsjm">
                    <i class="fa-2x fa-brands fa-twitter"></i>
                </a>&nbsp;&nbsp;&nbsp;&nbsp;
                <a href="https://codingoncaffeineblog.wordpress.com/">
                    <i class="fa-2x fa-brands fa-wordpress"></i>
                </a>
            </p>
        </div>
        <div class="col-lg-6">
            <h2><i class="fa-solid fa-envelope"></i> Email</h2>
            <p><a href="mailto:jason.shands@gmail.com">Send me an email!</a></p>
        </div>
    </div>
    <div class="row pt-4">
        <h2><i class="fa-solid fa-message"></i> Message</h2>
        <p>Send me a quick message here!</p>
    </div>

    @switch (status) {        
        case Status.Sending:
            <div class="row">
                <div class="col-lg-12">
                    <div class="alert alert-primary" role="alert">
                        Sending message...
                    </div>
                </div>
            </div>
            break;

        case Status.Sent:
            <div class="row">
                <div class="col-lg-12">
                    <div class="alert alert-success" role="alert">
                        Message sent!
                    </div>
                </div>
            </div>
            break;

        case Status.Failed:
            <div class="row">
                <div class="col-lg-12">
                    <div class="alert alert-danger" role="alert">
                        Message could not be sent!
                    </div>
                </div>
            </div>
            break;
    }

    <EditForm Model="@contact" OnValidSubmit="@HandleValidSubmitAsync">
        <div class="form-group">
            <DataAnnotationsValidator />
            <ValidationSummary />
            
            <p>
                <div class="row">
                    <div class="col-lg-6">
                        <InputText class="form-control form-control-lg" id="name" @bind-Value="contact.Name" placeholder="Name" />
                    </div>
                    <div class="col-lg-6">
                        <InputText class="form-control form-control-lg" id="email" @bind-Value="contact.Email" placeholder="Email" />
                    </div>
                </div>
            </p>
            <p>
                <div class="row">
                    <div class="col-lg-12">
                        <InputTextArea class="form-control form-control-lg" id="text" @bind-Value="contact.Message" placeholder="Message" rows="4" />
                    </div>
                </div>
            </p>
            <p>
                <div class="row">
                    <div class="col-lg-9"></div>
                    <div class="col-lg-3 pb-2">
                        <button class="form-control form-control-lg btn btn-primary" type="submit" disabled="@(status != Status.NotSent && status != Status.Failed)">Send</button>
                    </div>
                </div>
            </p>
        </div>
    </EditForm>
</div>

@code {

    private ContactComponentModel contact = new();
    enum Status {
        NotSent,
        Sending,
        Sent,
        Failed,
    }

    private Status status = Status.NotSent;

    private bool IsFormEnabled()
    {
        return status == Status.NotSent;
    }

    private async Task HandleValidSubmitAsync()
    {
        status = Status.Sending;

        var request = new HttpRequestMessage(HttpMethod.Post, "https://shandsj-portfolio.azurewebsites.net/api/contact");
        request.Content = JsonContent.Create(new 
        {
            Name = contact.Name,
            Email = contact.Email,
            Message = contact.Message,
        });

        using var httpResponse = await httpClient.SendAsync(request);
        @* var response = await httpResponse.Content.ReadFromJsonAsync(); *@
        if (httpResponse.StatusCode == System.Net.HttpStatusCode.OK)
        {
            status = Status.Sent;
        }
        else
        {
            status = Status.Failed;
        }
    }
}
